#+title:Spotify Talks to a Genius

* Quick Description
An engine that searches the [[https://www.genius.com][Genius]] database for [[http://www.spotify.com][Spotify]]-playable tracks whose lyrics contain the user-submitted search term.
* Background
This project began as simply a means for learning and exploration. I had been trying to find a project that would allow me to practice my Javascript/React front end skills while utilizing an external API. I settled on playing with the Spotify API because of its high-quality docs and the simple, familiar context (music!).

Spotify provides quite a bit of built-in functionality via its API, but it does not offer the ability to search for tracks by lyrics. I figured I could easily use the Genius API in conjunction with the Spotify API to create an online tool to fill this gap. I was mistaken.

Initially expecting to create an SPA, I was disappointed to learn that the Genius API had /at least/ one major limitation: their API does not permit the searching of lyrics. That along with other limitations (described below) meant I needed rethink the project and include a server.

I decided to stick with Javascript and write a server using Node. To challenge myself, I committed to avoiding pre-written frameworks or modules such as Express and Node-Fetch. So this became more of a back end project rather than front end.

Most importantly, it is a playground and a work in progress. It is not intended for general use though you may choose to use it if you so wish. Over time, if I don't get distracted by something with more value or utility (which is high likely), I will try to make both the Genius and Spotify wrappers more decoupled and generally usable.

* Design Details
** The 3 ways to search lyrics on Genius
*** Background
Genius began as a crowd-sourced lyrics database that allowed users to annotate the lyrics in order to discuss the meaning behind the lyrics. They've since expanded into being a crowd-sourced and licensed database of documents in general, and have refocused on their business on annotations of those documents, whether they be lyrics, manifestos, websites, speech transcript or whatever else finds their way into the database. Their database still retains remnants of its lyrics-focus, particularly with regard to metadata properties and values, and this can create confusion regarding the type of document being examined.

Additionally, they've gotten into disagreements with Google and others regarding the lifting of their lyrics via web scraping. As such, they do not make it easy to scrape documents and, while they provide API access to annotations and certain metadata, they definitely do not provide any API access to the document content itself.
*** API Query endpoint
**** Pros
+ Documented
+ Clean interface
+ Does not violate CORS
+ More Stable.
**** Cons
+ Rate limited
+ Limited number of results (~50)
+ Query endpoint is non-specific. There is no way to limit the query to lyrics only (or any specific document category) and *it will also search metadata*.
+ Does not provide access to document content AT ALL. Neither by the query endpoint or inclusion in the response data from another endpoint.
+ Does not provide information about the /type/ of the document, ie whether it is a song, speech, web article, paper
+ Does not provide any means for filtering or sorting.
+ Requires an API key
**** Conclusion:
 Even if one could retrieve document content, the combination of limitations described above confounds any attempt to use the API in isolation. For example, suppose a user wanted all lyrics with the term "pumpkins". The query endpoint will include /all/ documents related to the rock-group *The Smashing Pumpkins*. Because The Smashing Pumpkins are so prolific and popular and because "pumpkins" is an otherwise infrequent term, the query result will largely include documents /by/ The Smashing Pumpkins/ even though none of those documents actually have 'pumpkins' /in/ the content. Combined with the limit on results (50) and no ability to filter, it is nearly impossible to use the API to find lyrics that actually include the term 'pumpkins' even though they surely exist.
*** HTML scraping
**** Pros
+ Free to access any data on the website assuming one can understand the structure and manipulate dynamic content.
+ In some cases, I found that Genius includes the Spotify ID for tracks hidden within the page's metadata. This seems to be because Genius and Spotify have (/or had?/) a partnership. This is useful for this app as it reduces calls to the Spotify API, /but/ this data is not usually present and not always accurate. Nonetheless, it helps.
+ Does not require a key
**** Cons
+ It is far more difficult than a simple API call. Manipulation of /some/ dynamic content may require clever hacks or be practically unfeasible.
+ Undocumented
+ Less stable, subject to breaking changes without notice
+ Slower
+ Requires more resources
+ Must be server-side due to CORS
*** API Query + HTML scraping
**** Pros
+ Provides a little more stability and documentation
+ Quicker development than HTML scraping alone
**** Cons
+ Includes, to some degree, most of the cons of each method described above
+ More requests
**** Conclusion
I chose this route to begin with, but it is still not ideal. It is easier to work with and allows the site to be /mostly/ functional, but it is still limited by the *Smashing Pumpkins* problem described above.
** Structure

#+begin_src plantuml :file output.png

actor Aesop
participant s2g as "Spotify\nTalks to a\nGenius"
box Genius
    participant g_api as "API"
    participant g_web as "Web"
end box
Aesop -> s2g: query
activate s2g
||45||
s2g -> g_api: request:query
activate g_api
s2g <<-- g_api: response:result
deactivate g_api
||30||
    loop n times
        s2g ->> g_web: request: doc HTML
        activate g_web
            s2g <<-- g_web: response: doc html
        deactivate g_web
        ||10||
    end
box Spotify
    participant s_api as "API"
end box
||45||
s2g -> s_api as "Spotify API": getTracks
activate s_api
    s2g <<-- s_api: tracks
deactivate s_api
||30||
Aesop <- s2g: results
deactivate s2g

#+end_src

* TODOS
** TODO Decouple Genius/Spotify wrapper functions from core
*** [ ] move core functions in track.js into a new file named: api/query.js
*** [ ] rewrite api call to use query endpoint
*** [ ] query endpoint should expect a single variable q that will contain the search terms
*** [ ] parse q value into separate variables: lyrics, track, artist, album
** TODO [#B]
